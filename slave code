#include <Wire.h>           // I2C 통신을 위한 Wire 라이브러리 포함
#include <NewPing.h>        // 초음파 센서 거리 측정을 위한 NewPing 라이브러리 포함
#include <MsTimer2.h>       // MsTimer2 라이브러리 포함

#define SONAR_NUM 3         // 초음파 센서의 개수
#define MAX_DISTANCE 100    // 초음파 센서의 측정 최대 거리

#define SIZE 5              // 재귀 이동 평균 필터를 위한 배열 크기
#define sensorPin A0        // 가변저항 연결 핀 번호

#define Front 0            
#define Left  1 
#define Right 2

#define TRIG1 31 // 초음파 센서 1번 Trig 핀 번호
#define ECHO1 30 // 초음파 센서 1번 Echo 핀 번호
#define TRIG2 27 // 초음파 센서 2번 Trig 핀 번호
#define ECHO2 26 // 초음파 센서 2번 Echo 핀 번호
#define TRIG3 34 // 초음파 센서 3번 Trig 핀 번호
#define ECHO3 35 // 초음파 센서 3번 Echo 핀 번호

// 초음파 센서 객체 생성
NewPing sonar[SONAR_NUM] = 
{   
  NewPing(TRIG1, ECHO1, MAX_DISTANCE), 
  NewPing(TRIG2, ECHO2, MAX_DISTANCE),
  NewPing(TRIG3, ECHO3, MAX_DISTANCE)
};

// 각 센서 데이터 배열 선언 및 초기화
float front_sensorData[SIZE] = {0.0};
float left_sensorData[SIZE] = {0.0};
float right_sensorData[SIZE] = {0.0};
float resistance_sensorData[SIZE] = {0.0};

//////////////////// 정면 초음파 센서 재귀 이동 평균 필터 적용 함수 ///////////////////////////////
float recursive_moving_average_front(float ad_value) 
{
  static float avg_front = 0.0;      // 평균 값을 저장할 정적 변수 선언 및 초기화

  for (int i = 0; i <= SIZE - 2; i++)    // 배열의 인덱스를 1칸씩 이동
  {
    front_sensorData[i] = front_sensorData[i + 1];    // 배열의 기존 값들을 1칸 씩 이동하여 대입
  }
    
  front_sensorData[SIZE - 1] = ad_value;      // 배열의 가장 마지막에 새로 입력된 값을 대입
     
  avg_front = avg_front + (front_sensorData[SIZE - 1] - front_sensorData[0]) / (float)SIZE;   // 재귀 이동 평균 필터 공식, static을 사용하여 이전 값이 초기화되지 않고 유지되어 avg_old를 사용하지 않아도 됨

  return avg_front;
}

// 왼쪽 초음파 센서 재귀 이동 평균 필터 적용 함수
float recursive_moving_average_left(float ad_value) 
{
  static float avg_left = 0.0;       // 평균 값을 저장할 정적 변수 선언 및 초기화

  for (int i = 0; i <= SIZE - 2; i++)    // 배열의 인덱스를 1칸씩 이동
  {
    left_sensorData[i] = left_sensorData[i + 1];    // 배열의 기존 값들을 1칸 씩 이동하여 대입
  }
    
  left_sensorData[SIZE - 1] = ad_value;     // 배열의 가장 마지막에 새로 입력된 값을 대입
     
  avg_left = avg_left + (left_sensorData[SIZE - 1] - left_sensorData[0]) / (float)SIZE;      // 재귀 이동 평균 필터 공식, static을 사용하여 이전 값이 초기화되지 않고 유지되어 avg_old를 사용하지 않아도 됨

  return avg_left;
}

//////////////////// 오른쪽 초음파 센서 재귀 이동 평균 필터 적용 함수 //////////////////////////////////
float recursive_moving_average_right(float ad_value) 
{
  static float avg_right = 0.0;      // 평균 값을 저장할 정적 변수 선언 및 초기화

  for (int i = 0; i <= SIZE - 2; i++)   // 배열의 인덱스를 1칸씩 이동
  {
    right_sensorData[i] = right_sensorData[i + 1];   // 배열의 기존 값들을 1칸 씩 이동하여 대입
  }
    
  right_sensorData[SIZE - 1] = ad_value;     // 배열의 가장 마지막에 새로 입력된 값을 대입
     
  avg_right = avg_right + (right_sensorData[SIZE - 1] - right_sensorData[0]) / (float)SIZE;  // 재귀 이동 평균 필터 공식, static을 사용하여 이전 값이 초기화되지 않고 유지되어 avg_old를 사용하지 않아도 됨

  return avg_right;
}

//////////////////// 가변저항 재귀 이동 평균 필터 함수 ///////////////////////////////////
float recursive_moving_average_resistance(float new_value) 
{
  static float avg_resistance = 0.0;      // 평균 값을 저장할 정적 변수 선언 및 초기화

  for (int i = 0; i <= SIZE - 2; i++)     // 배열의 인덱스를 1칸씩 이동
  {
    resistance_sensorData[i] = resistance_sensorData[i + 1];    // 배열의 기존 값들을 1칸 씩 이동하여 대입
  }
    
  resistance_sensorData[SIZE - 1] = new_value;     // 배열의 가장 마지막에 새로 입력된 값을 대입
     
  avg_resistance = avg_resistance + (resistance_sensorData[SIZE - 1] - resistance_sensorData[0]) / (float)SIZE;    // 재귀 이동 평균 필터 공식, static을 사용하여 이전 값이 초기화되지 않고 유지되어 avg_old를 사용하지 않아도 됨
  
  return avg_resistance;
}

float result = 0.0;  // 전역 변수로 선언

// 가변저항 값을 읽어 재귀 이동 평균 필터 계산 및 출력하는 함수 (Mstimer2를 사용해서 100ms마다 호출)
void Read_sensor(void) 
{
   float new_value = 0.0;    // 지역 변수 선언
   new_value = analogRead(A0);   // A0 핀으로 읽은 데이터를 변수에 대입
   result = recursive_moving_average_resistance(new_value);   // 가변 저항 재귀 이동 평균 필터 함수를 호출 후 A0 핀으로 읽은 데이터를 인자로 전달, 반환 값을 변수에 대입
   Serial.print("가변저항 : "); Serial.println(result);
   Serial.println(" ");
}

void setup() 
{
  // 초음파 센서 핀 출력 설정
  pinMode(TRIG1, OUTPUT);
  pinMode(ECHO1, INPUT);
  pinMode(TRIG2, OUTPUT);
  pinMode(ECHO2, INPUT);
  pinMode(TRIG3, OUTPUT);
  pinMode(ECHO3, INPUT);
  
  Serial.begin(115200); // 시리얼 통신 시작

  MsTimer2::set(100, Read_sensor); // 100ms마다 Read_sensor 함수 호출
  MsTimer2::start(); // MsTimer2 시작

  Wire.begin(); // I2C 통신 시작
}

void loop() 
{
  float front_sonar = sonar[Front].ping_cm();    // 정면 초음파 센서로 측정된 거리를 cm단위로 반환
  float left_sonar  = sonar[Left].ping_cm();     // 왼쪽 초음파 센서로 측정된 거리를 cm단위로 반환
  float right_sonar = sonar[Right].ping_cm();    // 오른쪽 초음파 센서로 측정된 거리를 cm단위로 반환
  
  if (front_sonar == 0.0 ) front_sonar = MAX_DISTANCE;     // 거리 값이 측정되지 않을 경우 최대 거리 값으로 고정
  if (left_sonar == 0.0) left_sonar = MAX_DISTANCE;        // 거리 값이 측정되지 않을 경우 최대 거리 값으로 고정
  if (right_sonar == 0.0) right_sonar = MAX_DISTANCE;      // 거리 값이 측정되지 않을 경우 최대 거리 값으로 고정
  
  // 재귀 이동 평균 필터 함수 호출 후 반환값을 실수형으로 변수에 대입
  float front_avg = recursive_moving_average_front(front_sonar);
  float left_avg = recursive_moving_average_left(left_sonar);
  float right_avg = recursive_moving_average_right(right_sonar);

  // 결과값 출력
  Serial.print("정면: "); Serial.print(front_avg); Serial.print("cm ");
  Serial.print("왼쪽: "); Serial.print(left_avg); Serial.print("cm ");
  Serial.print("오른쪽: "); Serial.print(right_avg); Serial.println("cm ");

  // 공용체 정의 및 변수 선언 : 4바이트 전송 (초음파 센서 3개 및 가변 저항 재귀 평균 이동 필터)
  union {
    float value;
    byte bytes[4];
  } frontUnion, leftUnion, rightUnion, resultUnion;

  // value 멤버에 재귀 이동 평균 필터 함수를 호출해서 얻은 반환값을 할당
  frontUnion.value = front_avg;   
  leftUnion.value = left_avg;
  rightUnion.value = right_avg;
  resultUnion.value = result;

  // 슬레이브 보드로 데이터 전송
  Wire.beginTransmission(8);         // 슬레이브 주소 8번
  Wire.write(frontUnion.bytes, 4);   // 정면 초음파 센서 값
  Wire.write(leftUnion.bytes, 4);    // 왼쪽 초음파 센서 값
  Wire.write(rightUnion.bytes, 4);   // 오른쪽 초음파 센서 값
  Wire.write(resultUnion.bytes, 4);  // 가변 저항 값
  Wire.endTransmission();            // 데이터 송신 종료

  delay(100); // 100ms 대기
}
